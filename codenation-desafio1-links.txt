JSONSENDER {
//	https://stackoverflow.com/questions/7181534/http-post-using-json-in-java
//  https://stackoverflow.com/questions/2469451/upload-files-from-java-client-to-a-http-server
//	THIS https://www.baeldung.com/httpurlconnection-post
}

JSONSAVER {
//	import static controllers.JsonReader.organizateJson;
//	fw.write(json.toString());
//	fw.write(JsonReader.organizateJson(json).toString());
}

JSONREADER {
//    public static JSONObject organizateJson(JSONObject json){
//        try {
//            JSONObject organizatedJson = new JSONObject();
//            
//            https://stackoverflow.com/questions/4576352/remove-all-occurrences-of-char-from-string
//https://stackoverflow.com/questions/15609306/convert-string-to-json-array
            //TODO NAO ESTA ORDENANDO CORRETAMENTE
//            organizatedJson.append("numero_casas", json.get("numero_casas").toString().replaceAll("\\[\\]", ""));
//            organizatedJson.append("token", json.get("token").toString().replaceAll("\\[\\]", ""));
//            organizatedJson.append("cifrado", json.get("cifrado").toString().replaceAll("\\[\\]", ""));
//            organizatedJson.append("decifrado", json.get("decifrado").toString().replaceAll("\\[\\]", ""));
//            organizatedJson.append("resumo_criptografico", json.get("resumo_criptografico").toString().replaceAll("\\[\\]", ""));
//            
//            return organizatedJson;
//            
//            https://stackoverflow.com/questions/9151619/how-to-iterate-over-a-jsonobject
            //iterar as keys e salvar na ordem
//            Iterator<String> keys = json.keys();
//            while(keys.hasNext()){
//                String key = keys.next();
//                if(json.get(key) instanceof JSONObject){
//                    
//                }
//            }
//  
//        } catch (JSONException ex) {
//            Logger.getLogger(JsonReader.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        return null;
//    }
}

=================================================================

	public String sendJson(JSONObject json){
        HttpPost post;
        StringEntity params;
       try {
        post = new HttpPost(this.getUrl());
        String jsonString = json.toString();
        params = new StringEntity("<file name=\"answer\">" + jsonString + "</file>");
//        params = new StringEntity("details={\"name\":\"myname\",\"age\":\"20\"} ");
        post.addHeader("content-type", "application/x-www-form-urlencoded");
        post.setEntity(params);
           System.out.println(post.toString()); 
            try { 
                HttpResponse response = httpClient.execute(post);
                return response.toString();
            } catch (IOException ex) {
                Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
            }
       } catch (UnsupportedEncodingException ex) {
           Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
       }
       return null;
   }
   
   
====================================================================

   public JsonSender(String url){
//       this.httpClient = HttpClientBuilder.create().build();
       this.httpClient = HttpClients.createDefault();
       this.setUrl(url);
   }

   public String sendJson(JSONObject json){
        HttpPost post;
        StringEntity params;
       try {
        post = new HttpPost(this.getUrl());
        String jsonString = json.toString();
//        params = new StringEntity("<file name=\"answer\">" + jsonString + "</file>");
        params = new StringEntity(jsonString);
        params.setContentType(ContentType.APPLICATION_JSON.getMimeType());
//        params = new StringEntity("details={\"name\":\"myname\",\"age\":\"20\"} ");
//        post.setHeader("content-type", "application/x-www-form-urlencoded");
        post.setEntity(params);
//        post.setHeader("Content-Type", "multipart/form-data");
        post.setHeader("Content-Type", "application/json");
           System.out.println(post); 
            try { 
                HttpResponse response = httpClient.execute(post);
                httpClient.close();
                return response.toString();
            } catch (IOException ex) {
                Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
            }
       } catch (UnsupportedEncodingException ex) {
           Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
       }
       return null;
   }
   
   

====================================================================================

package controllers;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;

import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;

import org.json.JSONObject;

public class JsonSender {
   
   private HttpClient httpClient;
//   private CloseableHttpClient httpClient;
   private URL url;
   private HttpURLConnection con;
   
   public JsonSender(String url){
       this.httpClient = HttpClientBuilder.create().build();
//     this.httpClient = HttpClients.createDefault();
       try {
           this.url = new URL(url);
           this.con = (HttpURLConnection)this.url.openConnection();
       } catch (MalformedURLException ex) {
           Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
       } catch (IOException ex) {
           Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
       }
   }

   public String sendJson(JSONObject json){
       try {
           this.con.setRequestMethod("POST");
           con.setRequestProperty("Content-Type", "application/json; utf-8");
           con.setRequestProperty("Accept", "application/json");
           con.setDoOutput(true);
           String jsonString = json.toString();
           try(OutputStream os = con.getOutputStream()) {
               byte[] input = jsonString.getBytes("utf-8");
               os.write(input, 0, input.length);           
           } catch (IOException ex) {
               Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
           }
           
           try(BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), "utf-8"))) {
               StringBuilder response = new StringBuilder();
               String responseLine = null;
               while ((responseLine = br.readLine()) != null) {
                   response.append(responseLine.trim());
               } 
               return response.toString();
            }  catch (IOException ex) {
               Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
            }
       } catch (ProtocolException ex) {
           Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
       }
  
       return null;
   }
   
//    public String getUrl() {
//        return url;
//    }
//
//    public void setUrl(String url) {
//        this.url = url;
//    }
   
}

=========================================================================================================

package controllers;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;

import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;

import org.json.JSONObject;

public class JsonSender {
   
   private HttpClient httpClient;
//   private CloseableHttpClient httpClient;
   private URL url;
   private HttpURLConnection con;
   
   public JsonSender(String url){
       this.httpClient = HttpClientBuilder.create().build();
//     this.httpClient = HttpClients.createDefault();
       try {
           this.url = new URL(url);
           this.con = (HttpURLConnection)this.url.openConnection();
       } catch (MalformedURLException ex) {
           Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
       } catch (IOException ex) {
           Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
       }
   }

   public void sendJson(JSONObject json){
        File file = new File("./answer.json");
        
        try {
            con.setDoOutput(true);
            con.setRequestMethod("POST");
            con.setRequestProperty("Content-Type", "multipart/form-data; utf-8");
            
            OutputStream outputStreamToRequestBody = con.getOutputStream();
            BufferedWriter httpRequestBodyWriter = new BufferedWriter(new OutputStreamWriter(outputStreamToRequestBody));
            
            httpRequestBodyWriter.write("Content-Disposition: form-data; name=\"answer.json\""
                    + "filename= \"" + file.getName() + "\""
                    + "\nContent-Type: text/plain\n\n");
            httpRequestBodyWriter.write("<file name=\"answer.json\">");
            httpRequestBodyWriter.flush();
            
            FileInputStream inputStreamToLogFile = new FileInputStream(file);
            int bytesRead;
            byte[] dataBuffer = new byte[1024];
            while((bytesRead = inputStreamToLogFile.read(dataBuffer)) != -1) {
                outputStreamToRequestBody.write(dataBuffer, 0, bytesRead);
            }
            outputStreamToRequestBody.flush();     
            
            httpRequestBodyWriter.write("</file>");
            httpRequestBodyWriter.flush();
            
            outputStreamToRequestBody.close();
            httpRequestBodyWriter.close();
            
            BufferedReader httpResponseReader = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String lineRead;
            while((lineRead = httpResponseReader.readLine()) != null) {
                System.out.println(lineRead);
            }
           //https://www.techcoil.com/blog/how-to-upload-a-file-via-a-http-multipart-request-in-java-without-using-any-external-libraries/
           //https://www.baeldung.com/httpurlconnection-post
   
        } catch (ProtocolException ex) {
            Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
           Logger.getLogger(JsonSender.class.getName()).log(Level.SEVERE, null, ex);
       }
        
   }
   
//    public String getUrl() {
//        return url;
//    }
//
//    public void setUrl(String url) {
//        this.url = url;
//    }
   
}
